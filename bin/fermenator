#!/usr/bin/env python
"""
fermenator - monitor and manage fermentation

Usage:
  fermenator run [options]
  fermenator config mkobj <objtype> <name> [options]
  fermenator config rmobj <objtype> <name> [options]
  fermenator config set <objtype> <name> <key> <value> [options]
  fermenator -h | --help
  fermenator --version

Options:
  -h --help         Show this screen.
  --version         Show version.
  -v, --verbose     Enable verbose output logging
  -x, --xtra-verbose  Enable super-verbose logging
  -l, --logfile=<x>  Log to the specified file instead of screen
  -r, --refresh=<n>  Set interval for config change polling [default: 300]
"""
from docopt import docopt
import logging

logging.captureWarnings(True)

import fermenator.config

def main():
    args = docopt(__doc__, version="fermenator 0.1")

    root_logger = logging.getLogger()
    ferm_logger = logging.getLogger('fermenator')
    if args['--verbose'] or args['--xtra-verbose']:
        ferm_logger.setLevel(logging.DEBUG)
    else:
        ferm_logger.setLevel(logging.INFO)

    if args['--xtra-verbose']:
        root_logger.setLevel(logging.DEBUG)
    else:
        root_logger.setLevel(logging.WARN)

    log_format = "%(asctime)s %(levelname)-8s %(name)s %(message)s"
    formatter = logging.Formatter(log_format)

    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    ch.setFormatter(formatter)
    root_logger.addHandler(ch)

    if args['--logfile']:
        fh = logging.FileHandler(args['--logfile'])
        fh.setLevel(logging.DEBUG)
        fh.setFormatter(formatter)
        root_logger.addHandler(fh)

    # load configuration
    config = fermenator.config.ConfigLoader().config()
    config_klass = fermenator.config.get_class_by_name(config['datasource']['type'])
    config_obj = config_klass(config['datasource']['name'], **config['datasource']['config'])

    if args['run']:
        config_obj.run()
    elif args['config']:
        print("I'd do something here")


if __name__ == "__main__":
    main()
