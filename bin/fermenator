#!/usr/bin/env python
"""
fermenator - monitor and manage fermentation

Usage:
  fermenator run [options]
  fermenator init [options]
  fermenator -h | --help
  fermenator --version

Options:
  -h --help         Show this screen.
  --version         Show version.
  -v, --verbose     Enable verbose output logging
  -x, --xtra-verbose  Enable super-verbose logging
  -l, --logfile=<x>  Log to the specified file instead of screen

Commands:
  run:  Run the suite based on the configuraton file found in one of the default
        locations
  init: Initialize relay settings to ensure that relays are set OFF. Run this at
        boot time because RPi sets some pins to high and turns on relays.
"""
from docopt import docopt
import logging

logging.captureWarnings(True)

import fermenator.config

def set_up_logging(args):
    root_logger = logging.getLogger()
    ferm_logger = logging.getLogger('fermenator')
    if args['--verbose'] or args['--xtra-verbose']:
        ferm_logger.setLevel(logging.DEBUG)
    else:
        ferm_logger.setLevel(logging.INFO)

    if args['--xtra-verbose']:
        root_logger.setLevel(logging.DEBUG)
    else:
        root_logger.setLevel(logging.WARN)

    base_log_format = "%(levelname)-8s %(name)s %(message)s"
    formatter = logging.Formatter(log_format)

    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    ch.setFormatter(formatter)
    root_logger.addHandler(ch)

    if args['--logfile']:
        file_formatter = logging.Formatter("%(asctime)s " + base_log_format)
        fh = logging.FileHandler(args['--logfile'])
        fh.setLevel(logging.DEBUG)
        fh.setFormatter(file_formatter)
        root_logger.addHandler(fh)

def main():
    args = docopt(__doc__, version="fermenator 0.1")
    set_up_logging(args)

    f_man = fermenator.config.bootstrap()

    if args['run']:
        f_man.run()
    if args['init']:
        f_man.get_relays()

if __name__ == "__main__":
    main()
